[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to coasts","title":"Contributing to coasts","text":"outlines propose change coasts. detailed discussion contributing tidyverse packages, please see development contributing guide code review principles.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to coasts","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to coasts","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to coasts","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"WorldFishCenter/peskas.coasts\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to coasts","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to coasts","text":"Please note coasts project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with coasts","title":"Getting help with coasts","text":"Thanks using coasts! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with coasts","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty incredible ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with coasts","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with coasts","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lorenzo Longobardi. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Longobardi L (2025). coasts: Coastal Fisheries Data Pipeline Western Indian Ocean. R package version 0.1.0.","code":"@Manual{,   title = {coasts: Coastal Fisheries Data Pipeline for Western Indian Ocean},   author = {Lorenzo Longobardi},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"coasts","dir":"","previous_headings":"","what":"Coastal Fisheries Data Pipeline for Western Indian Ocean","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"coasts package provides comprehensive data pipeline processing analyzing coastal fisheries data Western Indian Ocean (WIO) region. integrates GPS tracking data Pelagic Data Systems (PDS), regional fisheries metadata, geospatial information support fisheries research management.","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"package designed handle complete workflow coastal fisheries data processing: Data Ingestion: Automated retrieval GPS boat tracking data Pelagic Data Systems Data Preprocessing: Spatial gridding summarization fishing activity patterns Data Export: Integration MongoDB data storage geospatial analysis Metadata Management: Handling device information regional boundaries package supports data Kenya Zanzibar fisheries, built-currency conversion regional harmonization capabilities.","code":""},{"path":"/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"GPS Track Processing: Ingest preprocess boat GPS tracks PDS API Spatial Analysis: Grid-based summarization fishing activity multiple scales (100m-1km) Cloud Storage Integration: Seamless upload/download Google Cloud Storage MongoDB Integration: Geospatial data storage 2dsphere indexing Parallel Processing: Efficient handling large datasets using parallel computation Automated Pipeline: GitHub Actions workflow continuous data processing","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"can install development version coasts GitHub :","code":"# install.packages(\"pak\") pak::pak(\"WorldFishCenter/peskas.coasts\")"},{"path":"/index.html","id":"configuration","dir":"","previous_headings":"","what":"Configuration","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"package requires conf.yml configuration file following structure:","code":"pds:   token: \"your_pds_token\"   secret: \"your_pds_secret\"   pds_trips:     file_prefix: \"pds_trips\"     version: \"latest\"   pds_tracks:     file_prefix: \"pds-tracks\"     version: \"latest\"  storage:   google:     key: \"google\"     options:       project: \"your-project-id\"       bucket: \"your-bucket-name\"       service_account_key: \"path/to/service-account.json\"   mongodb:     connection_string: \"mongodb://connection-string\"     database_name: \"your_database\"     collection:       wio_map: \"regional_boundaries\"       regional_metrics: \"time_series_data\"       pds_grids: \"fishing_grids\"  metadata:   google_sheet_id: \"your-google-sheet-id\""},{"path":[]},{"path":"/index.html","id":"data-ingestion","dir":"","previous_headings":"Main Functions","what":"Data Ingestion","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"","code":"library(coasts)  # Ingest GPS trip data from PDS ingest_pds_trips()  # Ingest detailed GPS track data ingest_pds_tracks()"},{"path":"/index.html","id":"data-preprocessing","dir":"","previous_headings":"Main Functions","what":"Data Preprocessing","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"","code":"# Preprocess tracks into spatial grids preprocess_pds_tracks(grid_size = 500)  # 500m grid cells  # Available grid sizes: 100, 250, 500, 1000 meters preprocess_pds_tracks(grid_size = 1000)  # 1km grid cells"},{"path":"/index.html","id":"data-export","dir":"","previous_headings":"Main Functions","what":"Data Export","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"","code":"# Export processed data to MongoDB export_geos()"},{"path":"/index.html","id":"metadata-management","dir":"","previous_headings":"Main Functions","what":"Metadata Management","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"","code":"# Get device metadata from Google Sheets devices <- get_metadata(table = \"devices\")  # Get all metadata tables all_metadata <- get_metadata()"},{"path":"/index.html","id":"data-pipeline-workflow","dir":"","previous_headings":"","what":"Data Pipeline Workflow","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"package implements automated data pipeline runs every 2 days via GitHub Actions: Build Container: Creates Docker container R dependencies Ingest PDS Trips: Downloads trip metadata PDS API Ingest PDS Tracks: Downloads detailed GPS tracks trip Preprocess Tracks: Creates spatial grid summaries fishing activity Export Data: Uploads processed data MongoDB geospatial indexing","code":""},{"path":"/index.html","id":"data-products","dir":"","previous_headings":"","what":"Data Products","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"pipeline produces several key data products: Trip Data: Basic trip information (start/end times, vessel info) Track Data: Detailed GPS points speed, heading, temporal information Time spent fishing grid cell Average speed vessel metrics Temporal patterns activity Regional Metrics: Time series data currency-converted economic indicators","code":""},{"path":"/index.html","id":"spatial-analysis-capabilities","dir":"","previous_headings":"","what":"Spatial Analysis Capabilities","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"package supports multi-scale spatial analysis: Grid summaries include: - time_spent_mins: Total fishing time per grid cell - mean_speed: Average vessel speed - n_points: Number GPS observations - first_seen/last_seen: Temporal extent activity","code":"# Fine-scale analysis (100m grids) preprocess_pds_tracks(grid_size = 100)  # Broad-scale patterns (1km grids)   preprocess_pds_tracks(grid_size = 1000)"},{"path":"/index.html","id":"cloud-storage-integration","dir":"","previous_headings":"","what":"Cloud Storage Integration","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"package seamlessly integrates Google Cloud Storage:","code":"# Upload processed data upload_cloud_file(   file = \"processed_data.parquet\",   provider = \"google\",   options = list(bucket = \"your-bucket\") )  # Download data for analysis download_cloud_file(   name = \"pds_trips_v1.0.0.parquet\",   provider = \"google\",    options = list(bucket = \"your-bucket\") )"},{"path":"/index.html","id":"mongodb-integration","dir":"","previous_headings":"","what":"MongoDB Integration","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"Geospatial data stored MongoDB appropriate indexing:","code":"# Push data with geospatial indexing mdb_collection_push(   data = spatial_data,   connection_string = \"mongodb://...\",   collection_name = \"fishing_areas\",   geo = TRUE  # Creates 2dsphere index )"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"package part WorldFish Center’s Peskas initiative small-scale fisheries monitoring. Contributions welcome via GitHub issues pull requests.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Coastal Fisheries Data Pipeline for Western Indian Ocean","text":"GPL (>= 3)","code":""},{"path":"/reference/add_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Add timestamp and sha string to a file name — add_version","title":"Add timestamp and sha string to a file name — add_version","text":"alternative version data name using sha (unique identifier) code using generate process data time data generated processed. function adds information, version identifier, file name (character string)","code":""},{"path":"/reference/add_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add timestamp and sha string to a file name — add_version","text":"","code":"add_version(filename, extension = \"\", sha_nchar = 7, sep = \"__\")"},{"path":"/reference/add_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add timestamp and sha string to a file name — add_version","text":"filename Path sans extension file version extension Extension file sha_nchar Number characters SHA use version identifier sep Characters separating version identifier file name","code":""},{"path":"/reference/add_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add timestamp and sha string to a file name — add_version","text":"character string file name version identifier","code":""},{"path":"/reference/add_version.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add timestamp and sha string to a file name — add_version","text":"SHA information retrieved using [git2r::sha]. code running context aware git repository (example code running inside container) function attempts get sha environment variable `GITHUB_SHA`. methods fail, sha versioning added.","code":""},{"path":"/reference/add_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add timestamp and sha string to a file name — add_version","text":"","code":"if (git2r::in_repository()) {   add_version(\"my_file\", \"csv\") } #> [1] \"my_file__20250527162839_744e187__.csv\""},{"path":"/reference/cloud_object_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Full Name of Versioned Cloud Object — cloud_object_name","title":"Retrieve Full Name of Versioned Cloud Object — cloud_object_name","text":"Gets full name(s) object(s) cloud storage matching specified prefix, version, file extension.","code":""},{"path":"/reference/cloud_object_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Full Name of Versioned Cloud Object — cloud_object_name","text":"","code":"cloud_object_name(   prefix,   version = \"latest\",   extension = \"\",   provider,   exact_match = FALSE,   options )"},{"path":"/reference/cloud_object_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Full Name of Versioned Cloud Object — cloud_object_name","text":"prefix string indicating object's prefix. version string specifying version (\"latest\" specific version string). extension file extension filter . empty string (\"\") includes extensions. provider character string specifying cloud provider (\"gcs\" \"aws\"). exact_match logical indicating whether match prefix exactly. options named list provider-specific options including bucket authentication details.","code":""},{"path":"/reference/cloud_object_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Full Name of Versioned Cloud Object — cloud_object_name","text":"vector names objects matching criteria.","code":""},{"path":"/reference/cloud_object_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Full Name of Versioned Cloud Object — cloud_object_name","text":"GCS, options list include: - `bucket`: bucket name. - `service_account_key`: authentication JSON contents, previously authenticated.","code":""},{"path":"/reference/cloud_object_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Full Name of Versioned Cloud Object — cloud_object_name","text":"","code":"if (FALSE) { # \\dontrun{ authentication_details <- readLines(\"path/to/json_file.json\") cloud_object_name(   \"prefix\",   \"latest\",   \"json\",   \"gcs\",   list(service_account_key = authentication_details, bucket = \"my-bucket\") ) #' } # }"},{"path":"/reference/cloud_storage_authenticate.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate to a Cloud Storage Provider — cloud_storage_authenticate","title":"Authenticate to a Cloud Storage Provider — cloud_storage_authenticate","text":"function primarily used internally functions establish authentication specified cloud providers Google Cloud Services (GCS) Amazon Web Services (AWS).","code":""},{"path":"/reference/cloud_storage_authenticate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate to a Cloud Storage Provider — cloud_storage_authenticate","text":"","code":"cloud_storage_authenticate(provider, options)"},{"path":"/reference/cloud_storage_authenticate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate to a Cloud Storage Provider — cloud_storage_authenticate","text":"provider character string specifying cloud provider (\"gcs\" \"aws\"). options named list options specific cloud provider (see details).","code":""},{"path":"/reference/cloud_storage_authenticate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Authenticate to a Cloud Storage Provider — cloud_storage_authenticate","text":"GCS, options list must include: - `service_account_key`: contents authentication JSON file Google Project. function wraps [googleCloudStorageR::gcs_auth()] handle GCS authentication.","code":""},{"path":"/reference/cloud_storage_authenticate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authenticate to a Cloud Storage Provider — cloud_storage_authenticate","text":"","code":"if (FALSE) { # \\dontrun{ authentication_details <- readLines(\"path/to/json_file.json\") cloud_storage_authenticate(\"gcs\", list(service_account_key = authentication_details)) #' } # }"},{"path":"/reference/download_cloud_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Object from Cloud Storage — download_cloud_file","title":"Download Object from Cloud Storage — download_cloud_file","text":"Downloads object cloud storage local file.","code":""},{"path":"/reference/download_cloud_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Object from Cloud Storage — download_cloud_file","text":"","code":"download_cloud_file(name, provider, options, file = name)"},{"path":"/reference/download_cloud_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Object from Cloud Storage — download_cloud_file","text":"name name object storage bucket. provider character string specifying cloud provider (\"gcs\" \"aws\"). options named list provider-specific options including bucket authentication details. file (Optional) local path save downloaded object. specified, object name used.","code":""},{"path":"/reference/download_cloud_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Object from Cloud Storage — download_cloud_file","text":"path downloaded file.","code":""},{"path":"/reference/download_cloud_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download Object from Cloud Storage — download_cloud_file","text":"GCS, options list include: - `bucket`: name bucket object downloaded. - `service_account_key`: authentication JSON contents, previously authenticated.","code":""},{"path":"/reference/download_cloud_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Object from Cloud Storage — download_cloud_file","text":"","code":"if (FALSE) { # \\dontrun{ authentication_details <- readLines(\"path/to/json_file.json\") download_cloud_file(   \"object_name.json\",   \"gcs\",   list(service_account_key = authentication_details, bucket = \"my-bucket\"),   \"local_path/to/save/object.json\" ) } # }"},{"path":"/reference/download_parquet_from_cloud.html","id":null,"dir":"Reference","previous_headings":"","what":"#' Download Parquet File from Cloud Storage — download_parquet_from_cloud","title":"#' Download Parquet File from Cloud Storage — download_parquet_from_cloud","text":"function handles process downloading parquet file cloud storage reading memory.","code":""},{"path":"/reference/download_parquet_from_cloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"#' Download Parquet File from Cloud Storage — download_parquet_from_cloud","text":"","code":"download_parquet_from_cloud(prefix, provider, options)"},{"path":"/reference/download_parquet_from_cloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"#' Download Parquet File from Cloud Storage — download_parquet_from_cloud","text":"prefix file prefix path cloud storage provider cloud storage provider key options Cloud storage provider options","code":""},{"path":"/reference/download_parquet_from_cloud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"#' Download Parquet File from Cloud Storage — download_parquet_from_cloud","text":"tibble containing data parquet file","code":""},{"path":"/reference/download_parquet_from_cloud.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"#' Download Parquet File from Cloud Storage — download_parquet_from_cloud","text":"","code":"if (FALSE) { # \\dontrun{ raw_data <- download_parquet_from_cloud(   prefix = conf$ingestion$koboform$catch$legacy$raw,   provider = conf$storage$google$key,   options = conf$storage$google$options ) } # }"},{"path":"/reference/export_geos.html","id":null,"dir":"Reference","previous_headings":"","what":"Export Geospatial Data and Regional Metrics to MongoDB — export_geos","title":"Export Geospatial Data and Regional Metrics to MongoDB — export_geos","text":"Downloads processes geospatial data two sources (Kenya Zanzibar), harmonizes structures, applies currency conversions regional time series metrics, exports data MongoDB collections appropriate indexing.","code":""},{"path":"/reference/export_geos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export Geospatial Data and Regional Metrics to MongoDB — export_geos","text":"","code":"export_geos()"},{"path":"/reference/export_geos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export Geospatial Data and Regional Metrics to MongoDB — export_geos","text":"None (invisible). Creates uploads data three MongoDB collections:   - Regional boundary geometries (2dsphere index)   - Regional time series metrics (currency-converted)   - PDS track grid summaries","code":""},{"path":"/reference/export_geos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export Geospatial Data and Regional Metrics to MongoDB — export_geos","text":"function performs several key operations: **Geospatial Data Processing:** 1. Downloads GeoJSON files Kenya Zanzibar regions cloud storage 2. Reads combines regional boundary data single dataset 3. Uploads combined geospatial data MongoDB 2dsphere indexing spatial queries **Regional Metrics Processing:** 4. Downloads monthly summary parquet files countries cloud storage 5. Applies currency conversion factors monetary metrics:    - Zanzibar: multiplies values 0.00037 (TZS USD conversion)    - Kenya: multiplies values 0.00077 (KES USD conversion) 6. Converts following monetary fields: mean_rpue, mean_rpua, mean_price_kg 7. Uploads regional metrics MongoDB without geospatial indexing **PDS Track Grid Processing:** 8. Downloads PDS track grid summaries cloud storage 9. Uploads grid summaries separate MongoDB collection function requires appropriate configuration parameters cloud storage access MongoDB connection details, typically loaded via `read_config()`.","code":""},{"path":[]},{"path":"/reference/export_geos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export Geospatial Data and Regional Metrics to MongoDB — export_geos","text":"","code":"if (FALSE) { # \\dontrun{ # Export all geospatial data and metrics to MongoDB export_geos() } # }"},{"path":"/reference/extract_trip_ids_from_filenames.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Trip IDs from Track Filenames — extract_trip_ids_from_filenames","title":"Extract Trip IDs from Track Filenames — extract_trip_ids_from_filenames","text":"Extract Trip IDs Track Filenames","code":""},{"path":"/reference/extract_trip_ids_from_filenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Trip IDs from Track Filenames — extract_trip_ids_from_filenames","text":"","code":"extract_trip_ids_from_filenames(filenames)"},{"path":"/reference/extract_trip_ids_from_filenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Trip IDs from Track Filenames — extract_trip_ids_from_filenames","text":"filenames Character vector track filenames","code":""},{"path":"/reference/extract_trip_ids_from_filenames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Trip IDs from Track Filenames — extract_trip_ids_from_filenames","text":"Character vector trip IDs","code":""},{"path":"/reference/generate_track_summaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Grid Summaries for Track Data — generate_track_summaries","title":"Generate Grid Summaries for Track Data — generate_track_summaries","text":"Processes GPS track data 1km grid summaries visualization analysis.","code":""},{"path":"/reference/generate_track_summaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Grid Summaries for Track Data — generate_track_summaries","text":"","code":"generate_track_summaries(data, min_hours = 0.15, max_hours = 15)"},{"path":"/reference/generate_track_summaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Grid Summaries for Track Data — generate_track_summaries","text":"data Preprocessed track data min_hours Minimum hours threshold filtering (default: 0.15) max_hours Maximum hours threshold filtering (default: 10)","code":""},{"path":"/reference/generate_track_summaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Grid Summaries for Track Data — generate_track_summaries","text":"dataframe grid summary statistics","code":""},{"path":"/reference/get_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metadata tables — get_metadata","title":"Get metadata tables — get_metadata","text":"Get Metadata tables Google sheets. function downloads tables include information fishery. can specify single table download get available tables.","code":""},{"path":"/reference/get_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metadata tables — get_metadata","text":"","code":"get_metadata(table = NULL, log_threshold = logger::DEBUG)"},{"path":"/reference/get_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metadata tables — get_metadata","text":"table Character. Name specific table download. NULL (default), tables specified configuration downloaded. log_threshold logging threshold level. Default logger::DEBUG.","code":""},{"path":"/reference/get_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metadata tables — get_metadata","text":"named list containing requested tables data frames. single   table requested, list contain table. table   specified, list contain available tables.","code":""},{"path":"/reference/get_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get metadata tables — get_metadata","text":"parameters needed `conf.yml` : “` storage:   storage_name:     key:     options:       project:       bucket:       service_account_key: metadata:   google_sheets:     sheet_id:     tables:       - table1       - table2 “`","code":""},{"path":"/reference/get_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get metadata tables — get_metadata","text":"","code":"if (FALSE) { # \\dontrun{ # Ensure you have the necessary configuration in conf.yml  # Download all metadata tables metadata_tables <- get_metadata()  # Download a specific table catch_table <- get_metadata(table = \"devices\") } # }"},{"path":"/reference/get_trip_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Trip Points from Pelagic Data Systems API — get_trip_points","title":"Get Trip Points from Pelagic Data Systems API — get_trip_points","text":"Retrieves trip points data Pelagic Data Systems API. function can either fetch data specific trip ID date range. response can returned data frame written directly file.","code":""},{"path":"/reference/get_trip_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Trip Points from Pelagic Data Systems API — get_trip_points","text":"","code":"get_trip_points(   token = NULL,   secret = NULL,   id = NULL,   dateFrom = NULL,   dateTo = NULL,   path = NULL,   imeis = NULL,   deviceInfo = FALSE,   errant = FALSE,   withLastSeen = FALSE,   tags = NULL,   overwrite = TRUE )"},{"path":"/reference/get_trip_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Trip Points from Pelagic Data Systems API — get_trip_points","text":"token Character string. Access token PDS API. secret Character string. Secret key PDS API. id Numeric character. Optional trip ID. provided, retrieves points specific trip. NULL, dateFrom dateTo must provided. dateFrom Character string. Start date data retrieval format \"YYYY-MM-DD\". Required id NULL. dateTo Character string. End date data retrieval format \"YYYY-MM-DD\". Required id NULL. path Character string. Optional path CSV file saved. provided, function returns path instead data frame. imeis Vector character numeric. Optional IMEI numbers filter data. deviceInfo Logical. TRUE, includes device information response. Default FALSE. errant Logical. TRUE, includes errant points response. Default FALSE. withLastSeen Logical. TRUE, includes last seen information. Default FALSE. tags Vector character. Optional tags filter data. overwrite Logical. TRUE, overwrite existing file path provided. Default TRUE.","code":""},{"path":"/reference/get_trip_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Trip Points from Pelagic Data Systems API — get_trip_points","text":"path NULL, returns tibble containing trip points data.   path provided, returns file path character string.","code":""},{"path":"/reference/get_trip_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Trip Points from Pelagic Data Systems API — get_trip_points","text":"","code":"if (FALSE) { # \\dontrun{ # Get data for a specific trip trip_data <- get_trip_points(   token = \"your_token\",   secret = \"your_secret\",   id = \"12345\",   deviceInfo = TRUE )  # Get data for a date range date_data <- get_trip_points(   token = \"your_token\",   secret = \"your_secret\",   dateFrom = \"2024-01-01\",   dateTo = \"2024-01-31\" )  # Save data directly to file file_path <- get_trip_points(   token = \"your_token\",   secret = \"your_secret\",   id = \"12345\",   path = \"trip_data.csv\" ) } # }"},{"path":"/reference/get_trips.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Trip Details from Pelagic Data API — get_trips","title":"Retrieve Trip Details from Pelagic Data API — get_trips","text":"function retrieves trip details Pelagic Data API specified time range, options filter IMEIs include additional information.","code":""},{"path":"/reference/get_trips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Trip Details from Pelagic Data API — get_trips","text":"","code":"get_trips(   token = NULL,   secret = NULL,   dateFrom = NULL,   dateTo = NULL,   imeis = NULL,   deviceInfo = FALSE,   withLastSeen = FALSE,   tags = NULL )"},{"path":"/reference/get_trips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Trip Details from Pelagic Data API — get_trips","text":"token Character string. API token authentication. secret Character string. API secret authentication. dateFrom Character string. Start date 'YYYY-MM-dd' format. dateTo Character string. End date 'YYYY-MM-dd' format. imeis Character vector. Optional. Filter IMEI numbers. deviceInfo Logical. TRUE, include device IMEI ID fields response. Default FALSE. withLastSeen Logical. TRUE, include device last seen date response. Default FALSE. tags Character vector. Optional. Filter trip tags.","code":""},{"path":"/reference/get_trips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Trip Details from Pelagic Data API — get_trips","text":"data frame containing trip details.","code":""},{"path":"/reference/get_trips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Trip Details from Pelagic Data API — get_trips","text":"","code":"if (FALSE) { # \\dontrun{ trips <- get_trips(   token = \"your_token\",   secret = \"your_secret\",   dateFrom = \"2020-05-01\",   dateTo = \"2020-05-03\",   imeis = c(\"123456789\", \"987654321\"),   deviceInfo = TRUE,   withLastSeen = TRUE,   tags = c(\"tag1\", \"tag2\") ) } # }"},{"path":"/reference/ingest_pds_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Ingest Pelagic Data Systems (PDS) Track Data — ingest_pds_tracks","title":"Ingest Pelagic Data Systems (PDS) Track Data — ingest_pds_tracks","text":"function handles automated ingestion GPS boat track data Pelagic Data Systems (PDS). downloads stores new tracks previously uploaded Google Cloud Storage. Uses parallel processing improved performance.","code":""},{"path":"/reference/ingest_pds_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ingest Pelagic Data Systems (PDS) Track Data — ingest_pds_tracks","text":"","code":"ingest_pds_tracks(log_threshold = logger::DEBUG, batch_size = NULL)"},{"path":"/reference/ingest_pds_tracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ingest Pelagic Data Systems (PDS) Track Data — ingest_pds_tracks","text":"log_threshold logging threshold use. Default logger::DEBUG. batch_size Optional number tracks process. NULL, processes new tracks.","code":""},{"path":"/reference/ingest_pds_tracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ingest Pelagic Data Systems (PDS) Track Data — ingest_pds_tracks","text":"None (invisible). function performs operations side effects.","code":""},{"path":"/reference/ingest_pds_trips.html","id":null,"dir":"Reference","previous_headings":"","what":"Ingest Pelagic Data Systems (PDS) Trip Data — ingest_pds_trips","title":"Ingest Pelagic Data Systems (PDS) Trip Data — ingest_pds_trips","text":"function handles automated ingestion GPS boat trip data Pelagic Data Systems (PDS). performs following operations: 1. Retrieves device metadata configured source 2. Downloads trip data PDS API using device IMEIs 3. Converts data parquet format 4. Uploads processed file configured cloud storage","code":""},{"path":"/reference/ingest_pds_trips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ingest Pelagic Data Systems (PDS) Trip Data — ingest_pds_trips","text":"","code":"ingest_pds_trips(log_threshold = logger::DEBUG)"},{"path":"/reference/ingest_pds_trips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ingest Pelagic Data Systems (PDS) Trip Data — ingest_pds_trips","text":"log_threshold logging threshold use. Default logger::DEBUG. See `logger::log_levels` available options.","code":""},{"path":"/reference/ingest_pds_trips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ingest Pelagic Data Systems (PDS) Trip Data — ingest_pds_trips","text":"None (invisible). function performs operations side effects:   - Creates parquet file locally trip data   - Uploads file configured cloud storage   - Generates logs process","code":""},{"path":"/reference/ingest_pds_trips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ingest Pelagic Data Systems (PDS) Trip Data — ingest_pds_trips","text":"function requires specific configuration `conf.yml` file following structure: “`yaml pds:   token: \"your_pds_token\"               # PDS API token   secret: \"your_pds_secret\"             # PDS API secret   pds_trips:     file_prefix: \"pds_trips\"            # Prefix output files storage:   google:                               # Storage provider name     key: \"google\"                       # Storage provider identifier     options:       project: \"project-id\"             # Cloud project ID       bucket: \"bucket-name\"             # Storage bucket name       service_account_key: \"path//key.json\" “` function processes trips sequentially: - Retrieves device metadata using `get_metadata()` - Downloads trip data using `get_trips()` function - Converts data parquet format - Uploads resulting file configured storage provider","code":""},{"path":[]},{"path":"/reference/ingest_pds_trips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ingest Pelagic Data Systems (PDS) Trip Data — ingest_pds_trips","text":"","code":"if (FALSE) { # \\dontrun{ # Run with default debug logging ingest_pds_trips()  # Run with info-level logging only ingest_pds_trips(logger::INFO) } # }"},{"path":"/reference/mdb_collection_pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Data from MongoDB — mdb_collection_pull","title":"Retrieve Data from MongoDB — mdb_collection_pull","text":"function connects MongoDB database retrieves documents specified collection, maintaining original column order available.","code":""},{"path":"/reference/mdb_collection_pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Data from MongoDB — mdb_collection_pull","text":"","code":"mdb_collection_pull(   connection_string = NULL,   collection_name = NULL,   db_name = NULL )"},{"path":"/reference/mdb_collection_pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Data from MongoDB — mdb_collection_pull","text":"connection_string character string specifying MongoDB connection URL. Default NULL. collection_name character string specifying name collection query. Default NULL. db_name character string specifying name database. Default NULL.","code":""},{"path":"/reference/mdb_collection_pull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Data from MongoDB — mdb_collection_pull","text":"data frame containing documents specified collection, columns ordered         data originally pushed MongoDB.","code":""},{"path":"/reference/mdb_collection_pull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Data from MongoDB — mdb_collection_pull","text":"","code":"if (FALSE) { # \\dontrun{ # Retrieve data from a MongoDB collection result <- mdb_collection_pull(   connection_string = \"mongodb://localhost:27017\",   collection_name = \"my_collection\",   db_name = \"my_database\" ) } # }"},{"path":"/reference/mdb_collection_push.html","id":null,"dir":"Reference","previous_headings":"","what":"Push Data to MongoDB Collection — mdb_collection_push","title":"Push Data to MongoDB Collection — mdb_collection_push","text":"Uploads data MongoDB collection, optionally creating geospatial index.","code":""},{"path":"/reference/mdb_collection_push.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Push Data to MongoDB Collection — mdb_collection_push","text":"","code":"mdb_collection_push(   data = NULL,   connection_string = NULL,   collection_name = NULL,   db_name = NULL,   geo = FALSE )"},{"path":"/reference/mdb_collection_push.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Push Data to MongoDB Collection — mdb_collection_push","text":"data data frame simple features (sf) object upload. connection_string Character. MongoDB connection string. collection_name Character. Name MongoDB collection. db_name Character. Name MongoDB database. geo Logical. Whether create 2dsphere index geometry field. Default FALSE.","code":""},{"path":"/reference/mdb_collection_push.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Push Data to MongoDB Collection — mdb_collection_push","text":"Logical. TRUE successful.","code":""},{"path":"/reference/mdb_collection_push.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Push Data to MongoDB Collection — mdb_collection_push","text":"","code":"if (FALSE) { # \\dontrun{ # Push data without geospatial indexing mdb_collection_push(   data = my_data,   connection_string = \"mongodb://localhost:27017\",   collection_name = \"mycollection\",   db_name = \"mydb\",   geo = FALSE )  # Push geospatial data with 2dsphere indexing mdb_collection_push(   data = sf_data,   connection_string = \"mongodb://localhost:27017\",   collection_name = \"geospatial_collection\",   db_name = \"mydb\",   geo = TRUE ) } # }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/preprocess_pds_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess Pelagic Data Systems (PDS) Track Data — preprocess_pds_tracks","title":"Preprocess Pelagic Data Systems (PDS) Track Data — preprocess_pds_tracks","text":"Downloads raw GPS tracks creates gridded summary fishing activity.","code":""},{"path":"/reference/preprocess_pds_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess Pelagic Data Systems (PDS) Track Data — preprocess_pds_tracks","text":"","code":"preprocess_pds_tracks(log_threshold = logger::DEBUG, grid_size = 500)"},{"path":"/reference/preprocess_pds_tracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess Pelagic Data Systems (PDS) Track Data — preprocess_pds_tracks","text":"log_threshold logging threshold use. Default logger::DEBUG. grid_size Numeric. Size grid cells meters (100, 250, 500, 1000).","code":""},{"path":"/reference/preprocess_pds_tracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess Pelagic Data Systems (PDS) Track Data — preprocess_pds_tracks","text":"None (invisible). Creates uploads preprocessed files.","code":""},{"path":"/reference/preprocess_track_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess Track Data into Spatial Grid Summary — preprocess_track_data","title":"Preprocess Track Data into Spatial Grid Summary — preprocess_track_data","text":"function processes GPS track data spatial grid summary, calculating time spent metrics grid cell. grid size can specified analyze spatial patterns different scales.","code":""},{"path":"/reference/preprocess_track_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess Track Data into Spatial Grid Summary — preprocess_track_data","text":"","code":"preprocess_track_data(data, grid_size = 500)"},{"path":"/reference/preprocess_track_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess Track Data into Spatial Grid Summary — preprocess_track_data","text":"data data frame containing GPS track data columns: - Trip: Unique trip identifier - Time: Timestamp GPS point - Lat: Latitude - Lng: Longitude - Speed (M/S): Speed meters per second - Range (Meters): Range meters - Heading: Heading degrees grid_size Numeric. Size grid cells meters. Must one : - 100: ~100m grid cells - 250: ~250m grid cells - 500: ~500m grid cells (default) - 1000: ~1km grid cells","code":""},{"path":"/reference/preprocess_track_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess Track Data into Spatial Grid Summary — preprocess_track_data","text":"tibble following columns:   - Trip: Trip identifier   - lat_grid: Latitude grid cell center   - lng_grid: Longitude grid cell center   - time_spent_mins: Total time spent grid cell minutes   - mean_speed: Average speed grid cell (M/S)   - mean_range: Average range grid cell (Meters)   - first_seen: First timestamp grid cell   - last_seen: Last timestamp grid cell   - n_points: Number GPS points grid cell","code":""},{"path":"/reference/preprocess_track_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preprocess Track Data into Spatial Grid Summary — preprocess_track_data","text":"function creates grid rounding coordinates based specified grid size. Grid sizes approximate due conversion meters degrees, calculations based 1 degree ≈ 111km equator. Time spent calculated using time differences consecutive points.","code":""},{"path":"/reference/preprocess_track_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess Track Data into Spatial Grid Summary — preprocess_track_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process tracks with 500m grid (default) result_500m <- preprocess_track_data(tracks_data)  # Use 100m grid for finer resolution result_100m <- preprocess_track_data(tracks_data, grid_size = 100)  # Use 1km grid for broader patterns result_1km <- preprocess_track_data(tracks_data, grid_size = 1000) } # }"},{"path":"/reference/process_single_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Single PDS Track — process_single_track","title":"Process Single PDS Track — process_single_track","text":"Process Single PDS Track","code":""},{"path":"/reference/process_single_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Single PDS Track — process_single_track","text":"","code":"process_single_track(trip_id, pars)"},{"path":"/reference/process_single_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Single PDS Track — process_single_track","text":"trip_id Character. ID trip process. pars List. Configuration parameters.","code":""},{"path":"/reference/process_single_track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Single PDS Track — process_single_track","text":"List processing status details.","code":""},{"path":"/reference/read_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Read configuration file — read_config","title":"Read configuration file — read_config","text":"Reads configuration file `conf.yml` adds logging lines. Wrapped convenience","code":""},{"path":"/reference/read_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read configuration file — read_config","text":"","code":"read_config()"},{"path":"/reference/read_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read configuration file — read_config","text":"environment parameters","code":""},{"path":"/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. enquo() enquos() delay execution one several function arguments. enquo() returns single quoted expression, like blueprint delayed computation. enquos() returns list quoted expressions. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). as_name() transforms quoted variable name string. Supplying something else quoted variable name error. unlike as_label() also returns single string supports kind R object input, including quoted function calls vectors. purpose summarise object single label. label often suitable default name. know quoted expression contains (instance expressions captured enquo() variable name, call function, unquoted constant), use as_label(). know quoted simple variable name, like enforce , use as_name(). learn tidy eval use tools, visit https://tidyeval.tidyverse.org Metaprogramming section Advanced R.","code":""},{"path":"/reference/upload_cloud_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload File to Cloud Storage — upload_cloud_file","title":"Upload File to Cloud Storage — upload_cloud_file","text":"Uploads local file specified cloud storage bucket, supporting single multiple files.","code":""},{"path":"/reference/upload_cloud_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload File to Cloud Storage — upload_cloud_file","text":"","code":"upload_cloud_file(file, provider, options, name = file)"},{"path":"/reference/upload_cloud_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload File to Cloud Storage — upload_cloud_file","text":"file character vector specifying path(s) file(s) upload. provider character string specifying cloud provider (\"gcs\" \"aws\"). options named list provider-specific options including bucket authentication details. name (Optional) name assign file cloud. specified, local file name used.","code":""},{"path":"/reference/upload_cloud_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload File to Cloud Storage — upload_cloud_file","text":"list metadata objects uploaded files successful.","code":""},{"path":"/reference/upload_cloud_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Upload File to Cloud Storage — upload_cloud_file","text":"GCS, options list must include: - `bucket`: name bucket files uploaded. - `service_account_key`: authentication JSON contents, previously authenticated. function utilizes [googleCloudStorageR::gcs_upload()] file uploads GCS.","code":""},{"path":"/reference/upload_cloud_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload File to Cloud Storage — upload_cloud_file","text":"","code":"if (FALSE) { # \\dontrun{ authentication_details <- readLines(\"path/to/json_file.json\") upload_cloud_file(   \"path/to/local_file.csv\",   \"gcs\",   list(service_account_key = authentication_details, bucket = \"my-bucket\") ) } # }"},{"path":"/reference/upload_parquet_to_cloud.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload Processed Data to Cloud Storage — upload_parquet_to_cloud","title":"Upload Processed Data to Cloud Storage — upload_parquet_to_cloud","text":"function handles process writing data parquet file uploading cloud storage.","code":""},{"path":"/reference/upload_parquet_to_cloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload Processed Data to Cloud Storage — upload_parquet_to_cloud","text":"","code":"upload_parquet_to_cloud(   data,   prefix,   provider,   options,   compression = \"lz4\",   compression_level = 12 )"},{"path":"/reference/upload_parquet_to_cloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload Processed Data to Cloud Storage — upload_parquet_to_cloud","text":"data data frame tibble upload prefix file prefix path cloud storage provider cloud storage provider key options Cloud storage provider options compression Compression algorithm use (default: \"lz4\") compression_level Compression level (default: 12)","code":""},{"path":"/reference/upload_parquet_to_cloud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload Processed Data to Cloud Storage — upload_parquet_to_cloud","text":"Invisible NULL","code":""},{"path":"/reference/upload_parquet_to_cloud.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload Processed Data to Cloud Storage — upload_parquet_to_cloud","text":"","code":"if (FALSE) { # \\dontrun{ upload_parquet_to_cloud(   data = processed_data,   prefix = conf$ingestion$koboform$catch$legacy$preprocessed,   provider = conf$storage$google$key,   options = conf$storage$google$options ) } # }"},{"path":"/news/index.html","id":"coasts-010","dir":"Changelog","previous_headings":"","what":"coasts 0.1.0","title":"coasts 0.1.0","text":"Initial release coastal fisheries data pipeline Western Indian Ocean region.","code":""},{"path":[]},{"path":"/news/index.html","id":"data-ingestion-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Data Ingestion","title":"coasts 0.1.0","text":"ingest_pds_trips() - Automated ingestion GPS boat trip data Pelagic Data Systems (PDS) API ingest_pds_tracks() - Parallel processing detailed GPS track data batch processing capabilities get_metadata() - Retrieval fishery metadata Google Sheets","code":""},{"path":"/news/index.html","id":"data-preprocessing-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Data Preprocessing","title":"coasts 0.1.0","text":"preprocess_pds_tracks() - Spatial gridding summarization fishing activity patterns Multi-scale spatial analysis support (100m, 250m, 500m, 1000m grid cells) Parallel processing efficient handling large datasets preprocess_track_data() - Core function converting GPS tracks spatial grid summaries","code":""},{"path":"/news/index.html","id":"data-export-and-storage-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Data Export and Storage","title":"coasts 0.1.0","text":"export_geos() - Comprehensive export geospatial data regional metrics MongoDB MongoDB integration 2dsphere geospatial indexing Currency conversion Kenya (KES USD) Zanzibar (TZS USD) economic indicators Support regional boundary data time series metrics","code":""},{"path":"/news/index.html","id":"cloud-storage-integration-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Cloud Storage Integration","title":"coasts 0.1.0","text":"upload_cloud_file() download_cloud_file() - Google Cloud Storage integration cloud_object_name() - Versioned object naming retrieval upload_parquet_to_cloud() download_parquet_from_cloud() - Optimized parquet file handling Automatic file compression using LZ4 algorithm","code":""},{"path":"/news/index.html","id":"database-operations-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Database Operations","title":"coasts 0.1.0","text":"mdb_collection_push() mdb_collection_pull() - MongoDB collection management Geospatial indexing support spatial queries Bulk data operations error handling","code":""},{"path":"/news/index.html","id":"api-integration-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"API Integration","title":"coasts 0.1.0","text":"get_trips() - PDS API integration trip data retrieval get_trip_points() - Detailed GPS point data PDS API Authentication token management external APIs","code":""},{"path":"/news/index.html","id":"automation-and-workflow-0-1-0","dir":"Changelog","previous_headings":"New Features","what":"Automation and Workflow","title":"coasts 0.1.0","text":"GitHub Actions workflow automated data pipeline execution Runs every 2 days complete data processing pipeline Docker containerization reproducible execution environment Configuration management conf.yml files","code":""},{"path":"/news/index.html","id":"geographic-coverage-0-1-0","dir":"Changelog","previous_headings":"","what":"Geographic Coverage","title":"coasts 0.1.0","text":"Kenya coastal fisheries data processing Zanzibar fisheries data integration Regional harmonization standardization","code":""},{"path":"/news/index.html","id":"technical-features-0-1-0","dir":"Changelog","previous_headings":"","what":"Technical Features","title":"coasts 0.1.0","text":"Parallel processing using future furrr packages Efficient data formats using Apache Arrow/Parquet Comprehensive logging configurable thresholds Error handling recovery mechanisms Versioned data management system","code":""}]
